name: EKS Deploy

on:
  workflow_run:
    workflows: [ "Docker Image CI" ]   # <-- MUST match the name in ci-docker-pipeline.yaml
    types: [ completed ]

jobs:
  deploy:
    # Only proceed if the upstream workflow succeeded AND was for pushes to main
    if: ${{ github.event.workflow_run.conclusion == 'success'
            && github.event.workflow_run.event == 'push'
            && github.event.workflow_run.head_branch == 'main' }}
    runs-on: ubuntu-latest

    env:
      CLUSTER_NAME: magabot-ingress
      AWS_REGION: ${{ secrets.AWS_REGION }}
      K8S_NAMESPACE: magabot-ns
      POLICY_NAME: AWSLoadBalancerControllerIAMPolicy
      SA_NAME: aws-load-balancer-controller
      SA_NAMESPACE: kube-system
      DEPLOYS: "iphone-deploy android-deploy desktop-deploy"

    steps:
      - name: Checkout repo at upstream SHA
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Install eksctl, kubectl, helm
        run: |
          curl -sSL https://git.io/get_eksctl | bash
          curl -sSL -o /usr/local/bin/kubectl \
            "https://storage.googleapis.com/kubernetes-release/release/$(curl -sSL https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x /usr/local/bin/kubectl
          curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Ensure cluster exists (create if missing)
        run: |
          if aws eks describe-cluster --name "$CLUSTER_NAME" >/dev/null 2>&1; then
            echo "Cluster exists."
          else
            echo "Creating cluster from eks/eks-config.yaml ..."
            eksctl create cluster -f eks/eks-config.yaml
          fi

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region "$AWS_REGION" --name "$CLUSTER_NAME"

      - name: Ensure ALB Controller IAM policy exists
        id: ensure-policy
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          POLICY_ARN="arn:aws:iam::$ACCOUNT_ID:policy/${POLICY_NAME}"
          if aws iam get-policy --policy-arn "$POLICY_ARN" >/dev/null 2>&1; then
            echo "policy_arn=$POLICY_ARN" >> $GITHUB_OUTPUT
          else
            aws iam create-policy \
              --policy-name "$POLICY_NAME" \
              --policy-document file://iam/iam_policy.json >/dev/null
            echo "policy_arn=$POLICY_ARN" >> $GITHUB_OUTPUT
          fi

      - name: Ensure IRSA service account for ALB Controller
        run: |
          eksctl create iamserviceaccount \
            --cluster="$CLUSTER_NAME" \
            --namespace="$SA_NAMESPACE" \
            --name="$SA_NAME" \
            --attach-policy-arn="${{ steps.ensure-policy.outputs.policy_arn }}" \
            --override-existing-serviceaccounts \
            --region="$AWS_REGION" \
            --approve

      - name: Install/Upgrade AWS Load Balancer Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n "$SA_NAMESPACE" \
            --set clusterName="$CLUSTER_NAME" \
            --set serviceAccount.create=false \
            --set serviceAccount.name="$SA_NAME" \
            --version 1.13.0
          kubectl -n "$SA_NAMESPACE" rollout status deploy/aws-load-balancer-controller

      - name: Ensure namespace
        run: kubectl apply -f eks/deployments/01-ns.yaml

      - name: Create/Update OPENAI secret from Actions Secret
        run: |
          kubectl -n "$K8S_NAMESPACE" create secret generic openai \
            --from-literal=OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply app manifests
        run: |
          kubectl apply -f eks/deployments/02-iphone.yaml
          kubectl apply -f eks/deployments/03-android.yaml
          kubectl apply -f eks/deployments/04-desktop.yaml
          kubectl apply -f eks/deployments/05-ingress.yaml

      - name: Rollout restart (pull latest)
        run: |
          kubectl -n "$K8S_NAMESPACE" rollout restart deploy/iphone-deploy deploy/android-deploy deploy/desktop-deploy
          kubectl -n "$K8S_NAMESPACE" rollout status  deploy/iphone-deploy
          kubectl -n "$K8S_NAMESPACE" rollout status  deploy/android-deploy
          kubectl -n "$K8S_NAMESPACE" rollout status  deploy/desktop-deploy

      - name: Show ALB DNS
        run: |
          echo "ALB:"
          kubectl -n "$K8S_NAMESPACE" get ingress magabot-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'; echo